#----------------------------------Модули, их виды и свои модули----------------------------------

#----------------------------------Общее о модулях

'''
# Импорт создает пространство имён
# Можно импортировать по относительному пути: from . import <> или from .<> import <>
# Существуют модули и пакеты. 
# Пакет обязательно содержит __init__.py и может содержать другие модули
# Модуль - один файл пайтон
# from <> imprt * лучше применять в пакетах
# Можно контролировать from <> import * так: прописать в модуле __all__ = ["<имя>", "<имя>", ...]
# from ..<> import <> - из родительской
'''

# Свой модуль----------------------------------

'''
import MyModule as mm

print(mm.hi())
print(mm.name)

# Если личный модуль находиться в другом каталоге, то импотр должен происходить через точку
# Пример: import floder.MyModule
# Конечно, если всё в одной папке
# Импортируемый модуль один раз выполняется при импорте
# Если написать print(__name__) в своем модуле, то там, где импортируем, выведет MyModule, а в самом модуле выведет __main__
# Чтобы эта команда исполнялась только при непосредственном запуске этого модуля: if __name__ == "__main__":
'''

# Модуль math----------------------------------

'''
import math

math.ceil(5.2) # округление до наибольшего целого
math.floor(5.2) # округление до наименьшего целого
math.factorial(5) # вычисление факториала числа
math.trunc(5.8) # отбросит дробную часть
math.log(4, 2) # вычисление логарифма по указанному основанию(по умолчанию число е) вторым аргументом указанного числа первым аргументом
math.sqrt(49) # квадратный корень
math.sin(90) # вычисление синуса
math.cos(90) # вычисление косинуса
math.tan(90) # вычисление тангенса
math.pi # константа число пи
math.e # константа число е
'''

# Модуль time----------------------------------

'''
import time
a = None

time.sleep(0) # остановить программу на указанное количество секунд

print(a)
'''

# Модуль datetime----------------------------------

'''
import datetime as dt

a = None

a = dt.datetime.now() # выводит точную дату и время на данный момент
# можно дописать .date(), чтобы вывести только дату или .time(), чтобы вывести только время
# также, .day, .weekday, .month, .year, .hour, .minute, .microsecond, .second

print(a)
'''

# Модуль sys и os----------------------------------

'''
import sys, os, platform

a = None

sys.path # полный путь к текущему проекту
os.name # название системы ПК
a = platform.system() # название системы ПК по нормальному

print(a)
'''

# Модуль random----------------------------------

'''
import random as r

lst = [1, -4, -2, 7, 2, 4, 0]

a = r.random() # возвращает случайные вещественные числа от 0 до 1
a = r.uniform(1, 5) # возвращает случайные вещественные числа в указанном диапазоне
a = r.randint(0, 10) # возвращает случайные целые числа в указанном диапазоне
a = r.randrange(0, 10, 2) # возвращает случайные целые числа в указанном диапазоне + шаг
a = r.gauss(0, 3.5) # возвращает случайные вещественные числа c разбросом в обе стороны (второй аргумент) от матю ожидания (первый аргумент)
a = r.choice(lst) # вернет рандомный элемент указанного списка
r.shuffle(lst) # перемешает указанный список (работает только с изменяемыми типами данных)
a = r.sample(lst, 2) # вернёт из указанного списка указанное количество элементов (рандомно взятых)

a = [r.randint(0, 10) for _ in range(21)] # список из рандомных значения в указанных диапазонах
# Но можно прописать r.seed(123) и последовательности будут одинаковыми
print(a)
'''
